import Head from "next/head"
import {
  useState,
  useCallback,
  JSXElementConstructor,
  ReactElement,
  ReactFragment,
  ReactPortal
} from "react"

import styles from "../styles/Home.module.scss"
import Map from "react-map-gl"
const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_TOKEN
import "mapbox-gl/dist/mapbox-gl.css"
import GeocoderControl from "../components/geocoder"

export default function Home() {
  //const [hoverInfo, setHoverInfo] = useState(null)
  const [hoverInfo, setHoverInfo] = useState<{
    count: number
    feature: string[]
    x: number
    y: number
  }>()

  const onHover = useCallback((event: mapboxgl.MapLayerMouseEvent) => {
    const {
      features,
      point: { x, y }
    } = event
    const hoveredFeature =
      features &&
      features.map((feature) => {
        return feature?.properties?.PDOid
      })

    if (hoveredFeature && hoveredFeature.length) {
      setHoverInfo({
        count: hoveredFeature.length,
        feature: hoveredFeature,
        x,
        y
      })
    }
  }, [])
  // console.log("hoverInfo", hoverInfo)

  return (
    <div className={styles.container}>
      <Head>
        <title>Winemap</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Map
        initialViewState={{
          latitude: 46,
          longitude: 9,
          zoom: 5,
          bearing: 0,
          pitch: 0
        }}
        style={{ width: "100vw", height: "100vh" }}
        mapStyle="mapbox://styles/tiacop/clas8a92e003c15o2bpopdfqt"
        mapboxAccessToken={MAPBOX_TOKEN}
        interactiveLayerIds={["pdo-area", "pdo-pins"]} /* defined in mapbox studio */
        onMouseMove={onHover}>
        <GeocoderControl mapboxAccessToken={MAPBOX_TOKEN!} position="top-left" />
      </Map>

      {hoverInfo && (
        <div className="tooltip" style={{ left: hoverInfo.x, top: hoverInfo.y }}>
          {hoverInfo.count > 1 && <div>{hoverInfo.count} overlapping PDOs</div>}
          {hoverInfo.feature.map(
            (
              f:
                | string
                | number
                | boolean
                | ReactElement<any, string | JSXElementConstructor<any>>
                | ReactFragment
                | ReactPortal
                | null
                | undefined,
              index: any
            ) => {
              return <div key={f + index}>{f}</div>
            }
          )}
        </div>
      )}
    </div>
  )
}
