import type { Expression } from "mapbox-gl";
import type { LayerProps } from "react-map-gl";
import uniqolor from "uniqolor";

import vulnerability from "@/app/data/vulnerability.json";

// https://docs.mapbox.com/mapbox-gl-js/example/data-join/
// Build a GL match expression that defines the color for every vector tile feature
// Use the ISO 3166-1 alpha 3 code as the lookup key for the country shape
const matchExpression: Expression = ["match", ["get", "PDOid"]];

// Calculate color values for each PDOid
if (vulnerability.length > 1) {
  for (const row of vulnerability) {
    // console.log("row", row);

    // const color = uniqolor(row["Vulnerability"], {
    //   saturation: [50, 75],
    //   lightness: [50, 70],
    //   differencePoint: 90,
    // });

    let color = "#fff";
    if (row["Vulnerability"] === "low") {
      color = "#4FF47C";
    } else if (row["Vulnerability"] === "moderate") {
      color = "#F5DA5C";
    } else if (row["Vulnerability"] === "high (low-mod Exposure)") {
      color = "#FF6D31";
    } else if (row["Vulnerability"] === "high (low-mod Sensitivity)") {
      color = "#FF6D31";
    } else if (row["Vulnerability"] === "high (mod-high Adapt. capacity)") {
      color = "#FF6D31";
    } else if (row["Vulnerability"] === "very high") {
      color = "#F51C1C";
    }

    //console.log("color", color);

    // get color by basecolor - darken color by amount of impacts per nutsregion

    // const mycolor = Color.fromString("#FFCEC3")
    //   .darken(amount / 100)
    //   .toHexString();

    matchExpression.push(row["PDOid"], color);
  }
}
// matchExpression.push("blue");
matchExpression.push("black");

//console.log("matchExpression", matchExpression);

export const vulnerabilityLayer: LayerProps = {
  id: "vulnerabilityLayer",
  type: "circle",
  source: "vulnerability",
  // filter: ["has", "point_count"],
  // layout: { visibility: "visible" },
  paint: {
    "circle-radius": {
      type: "exponential",
      base: 1.75,
      stops: [
        [0, 2], // 0 = zoom level, 2 = circle radius
        [6, 8],
        [8, 26],
      ],
    },
    "circle-opacity": {
      type: "exponential",
      stops: [
        [0, 1], // 0 = zoom level, 1 opacity
        [12, 0.5],
        [16, 0.8],
      ],
    },
    "circle-color": matchExpression,
    // "circle-color": [
    //   "match",
    //   ["get", "Vulnerability"],
    //   "very high",
    //   "#fbb03b",
    //   "moderate",
    //   "#223b53",
    //   "low",
    //   "#e55e5e",
    //   "high (low-mod Exposure)",
    //   "#3bb2d0",
    //   "#ccc",
    // ],
  },
};

// export const clusterLayer: LayerProps = {
//   id: "clusters",
//   type: "circle",
//   source: "existingChargingPoints",
//   filter: ["has", "point_count"],
//   layout: { visibility: "visible" },
//   paint: {
//     "circle-color": [
//       "step",
//       ["get", "PDOid"],
//       "#51bbd6",
//       1,
//       "#ddd",
//       1200,
//       "#f28cb1",
//     ],
//     //'circle-radius': ['step', ['get', 'point_count'], 20, 50, 20, 100, 20]
//     "circle-radius": ["step", ["get", "point_count"], 15, 5, 20, 30, 35],
//     "circle-stroke-color": "#ccc",
//     "circle-stroke-width": 1,
//     "circle-opacity": 0.8,
//   },
// };

// export const clusterCountLayer: LayerProps = {
//   id: "cluster-count",
//   type: "symbol",
//   source: "existingChargingPoints",
//   filter: ["has", "point_count"],
//   layout: {
//     "text-field": "{point_count_abbreviated}",
//     "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
//     "text-size": 12,
//   },
// };

// export const unclusteredPointLayer: LayerProps = {
//   id: "unclustered-point",
//   type: "symbol",
//   source: "existingChargingPoints",
//   filter: ["!", ["has", "point_count"]],
//   layout: {
//     "icon-image": "ecar_negative_green",
//     "icon-size": 0.35,
//     "icon-allow-overlap": true,
//     "icon-ignore-placement": false,
//   },
// };

// // export const unclusteredPointLayer: LayerProps = {
// //   id: 'unclustered-point',
// //   type: 'circle',
// //   source: 'existingChargingPoints',
// //   filter: ['!', ['has', 'point_count']],
// //   paint: {
// //     'circle-color': '#11b4da',
// //     'circle-radius': 4,
// //     'circle-stroke-width': 1,
// //     'circle-stroke-color': '#fff'
// //   }
// // };

// export const clusterLayerNew: LayerProps = {
//   id: "clustersNew",
//   type: "circle",
//   source: "newChargingPoints",
//   filter: ["has", "point_count"],
//   layout: { visibility: "visible" },
//   paint: {
//     "circle-color": [
//       "step",
//       ["get", "point_count"],
//       "red",
//       0,
//       "blue",
//       1200,
//       "black",
//     ],
//     "circle-radius": ["step", ["get", "point_count"], 15, 5, 20, 30, 35],
//   },
// };

// export const clusterCountLayerNew: LayerProps = {
//   id: "cluster-countNew",
//   type: "symbol",
//   source: "newChargingPoints",
//   filter: ["has", "point_count"],
//   layout: {
//     "text-field": "{point_count_abbreviated}",
//     "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
//     "text-size": 12,
//   },
// };

// export const unclusteredPointLayerNew: LayerProps = {
//   id: "unclustered-pointNew",
//   type: "symbol",
//   source: "newChargingPoints",
//   filter: ["!", ["has", "point_count"]],
//   layout: {
//     "icon-image": "ecar_negative_blue",
//     "icon-size": 0.35,
//     "icon-allow-overlap": true,
//     "icon-ignore-placement": true,
//   },
// };

// export const iconLayer: LayerProps = {
//   id: "icon",
//   type: "symbol",
//   source: "existingChargingPoints",
//   layout: {
//     "icon-image": "ecar_negative_green",
//     "icon-size": 0.35,
//   },
// };
